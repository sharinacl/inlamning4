package se.yrgo.dataaccess;

import org.springframework.dao.DataAccessException;
import org.springframework.dao.EmptyResultDataAccessException;
import org.springframework.jdbc.core.JdbcTemplate;
import org.springframework.jdbc.core.RowMapper;
import se.yrgo.domain.Call;
import se.yrgo.domain.Customer;

import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.Timestamp;
import java.util.List;

public class CustomerDaoJdbcTemplateImpl implements CustomerDao {
    private static final String DELETE_SQL = "DELETE FROM CUSTOMER WHERE CUSTOMER_ID = ?";
    private static final String UPDATE_SQL = "UPDATE CUSTOMER SET COMPANY_NAME = ?, EMAIL = ?, TELEPHONE = ?, NOTES = ? WHERE CUSTOMER_ID = ?";
    private static final String INSERT_SQL = "INSERT INTO CUSTOMER (CUSTOMER_ID, COMPANY_NAME, EMAIL, TELEPHONE, NOTES) VALUES (?, ?, ?, ?, ?)";
    private static final String GET_BY_ID_SQL = "SELECT CUSTOMER_ID, COMPANY_NAME, EMAIL, TELEPHONE, NOTES FROM CUSTOMER WHERE CUSTOMER_ID = ?";
    private static final String GET_BY_NAME_SQL = "SELECT CUSTOMER_ID, COMPANY_NAME, EMAIL, TELEPHONE, NOTES FROM CUSTOMER WHERE COMPANY_NAME LIKE ?";
    private static final String GET_ALL_SQL = "SELECT CUSTOMER_ID, COMPANY_NAME, EMAIL, TELEPHONE, NOTES FROM CUSTOMER";
    private static final String INSERT_CALL_SQL = "INSERT INTO TBL_CALL (TIME_AND_DATE, NOTES, CUSTOMER_ID) VALUES (?, ?, ?)";
    private static final String GET_CALLS_SQL = "SELECT ID, TIME_AND_DATE, NOTES FROM TBL_CALL WHERE CUSTOMER_ID = ?";

    private static final String CREATE_TABLE_SQL =
            "CREATE TABLE CUSTOMER (" +
                    "CUSTOMER_ID VARCHAR(20) PRIMARY KEY, " +
                    "COMPANY_NAME VARCHAR(255) NOT NULL, " +
                    "EMAIL VARCHAR(100), " +
                    "TELEPHONE VARCHAR(20), " +
                    "NOTES VARCHAR(1000))";

    private static final String CREATE_CALL_TABLE_SQL =
            "CREATE TABLE TBL_CALL (" +
                    "ID INTEGER GENERATED BY DEFAULT AS IDENTITY (START WITH 1) PRIMARY KEY, " +
                    "TIME_AND_DATE TIMESTAMP NOT NULL, " +
                    "NOTES VARCHAR(1000), " +
                    "CUSTOMER_ID VARCHAR(20) NOT NULL, " +
                    "FOREIGN KEY (CUSTOMER_ID) REFERENCES CUSTOMER(CUSTOMER_ID))";

    private JdbcTemplate jdbcTemplate;

    public CustomerDaoJdbcTemplateImpl(JdbcTemplate jdbcTemplate) {
        this.jdbcTemplate = jdbcTemplate;
        createTables();
    }

    private void createTables() {
        try {
            jdbcTemplate.execute(CREATE_TABLE_SQL);
            jdbcTemplate.execute(CREATE_CALL_TABLE_SQL);
        } catch (DataAccessException e) {
            System.err.println("Tables already exist");
        }
    }

    @Override
    public void create(Customer customer) {
        try {
            getById(customer.getCustomerId());
            System.out.println("Customer " + customer.getCustomerId() + " already exist");

        } catch (RecordNotFoundException e) {
            jdbcTemplate.update(INSERT_SQL,
                    customer.getCustomerId(),
                    customer.getCompanyName(),
                    customer.getEmail(),
                    customer.getTelephone(),
                    customer.getNotes()
            );
        }
    }

    @Override
    public Customer getById(String customerId) throws RecordNotFoundException {
        try {
            return jdbcTemplate.queryForObject(
                    GET_BY_ID_SQL,
                    new CustomerRowMapper(),
                    customerId
            );
        } catch (EmptyResultDataAccessException e) {
            throw new RecordNotFoundException();
        }
    }

    @Override
    public List<Customer> getByName(String name) {
        return jdbcTemplate.query(GET_BY_NAME_SQL, new CustomerRowMapper(), "%" + name + "%");
    }

    @Override
    public void update(Customer customerToUpdate) throws RecordNotFoundException {
        this.jdbcTemplate.update(UPDATE_SQL, customerToUpdate.getCustomerId());
    }

    @Override
    public void delete(Customer oldCustomer) throws RecordNotFoundException {
        int rows = jdbcTemplate.update(DELETE_SQL, oldCustomer.getCustomerId());
        if (rows == 0) {
            throw new RecordNotFoundException();
        }
    }

    @Override
    public List<Customer> getAllCustomers() {
        return jdbcTemplate.query(GET_ALL_SQL, new CustomerRowMapper());
    }

    @Override
    public Customer getFullCustomerDetail(String customerId) throws RecordNotFoundException {
        Customer customer = getById(customerId);
        List<Call> calls = jdbcTemplate.query(
                GET_CALLS_SQL,
                new CallRowMapper(),
                customerId
        );
        customer.setCalls(calls);
        return customer;
    }

    @Override
    public void addCall(Call newCall, String customerId) throws RecordNotFoundException {
        int rows = jdbcTemplate.update(INSERT_CALL_SQL,
                new Timestamp(newCall.getTimeAndDate().getTime()),
                newCall.getNotes(),
                customerId
        );
        if (rows == 0) {
            throw new RecordNotFoundException();
        }
    }
}

class CustomerRowMapper implements RowMapper<Customer> {
    public Customer mapRow(ResultSet rs, int rowNum) throws SQLException {
        String customerId = rs.getString("CUSTOMER_ID");
        String companyName = rs.getString("COMPANY_NAME");
        String email = rs.getString("EMAIL");
        String telephone = rs.getString("TELEPHONE");
        String notes = rs.getString("NOTES");

        return new Customer(customerId, companyName, email, telephone, notes);
    }
}

class CallRowMapper implements RowMapper<Call> {
    public Call mapRow(ResultSet rs, int rowNum) throws SQLException {
        int id = rs.getInt("ID");
        java.util.Date timeAndDate = new java.util.Date(rs.getTimestamp("TIME_AND_DATE").getTime());
        String notes = rs.getString("NOTES");

        Call call = new Call(notes, timeAndDate);
        return call;
    }
}